import SectionCard from "@/components/SectionCard";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { api } from "@/utils/api";
import { zodResolver } from "@hookform/resolvers/zod";
import type { Mitarbeiter } from "@prisma/client";
import FilePondPluginFileEncode from "filepond-plugin-file-encode";
import FilePondPluginFileValidateSize from "filepond-plugin-file-validate-size";
import FilePondPluginImageExifOrientation from "filepond-plugin-image-exif-orientation";
import FilePondPluginImagePreview from "filepond-plugin-image-preview";
import "filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css";
import "filepond/dist/filepond.min.css";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import { FilePond, registerPlugin } from "react-filepond";
import { useForm } from "react-hook-form";
import { z } from "zod";

// TODO: Bilder gehen nicht!

export default function Home() {
  const Mitarbeiter = api.Mitarbeiter.getAll.useQuery();

  const [ausgewählterMitarbeiter, setAusgewählterMitarbeiter] = useState<
    | ({
        Einkauf: {
          id: string;
          Paypal: boolean;
          Abonniert: boolean;
          Geld: string | null;
          Pfand: string | null;
          Dinge: string | null;
          Abgeschickt: Date | null;
          mitarbeiterId: string;
        } | null;
      } & Mitarbeiter)
    | undefined
  >(undefined);
  const [EinkaufMitarbeiter, setEinkaufMitarbeiter] = useState<
    | ({
        Einkauf: {
          id: string;
          Paypal: boolean;
          Abonniert: boolean;
          Geld: string | null;
          Pfand: string | null;
          Dinge: string | null;
          Abgeschickt: Date | null;
          mitarbeiterId: string;
        } | null;
      } & Mitarbeiter)
    | undefined
  >(undefined);

  useEffect(() => {
    if (ausgewählterMitarbeiter == undefined) {
      setEinkaufMitarbeiter(undefined);
    } else {
      setEinkaufMitarbeiter(ausgewählterMitarbeiter);
    }
  }, [ausgewählterMitarbeiter]);

  if (Mitarbeiter.isLoading) return <p>Loading...</p>;
  if (Mitarbeiter.error) return <p>Error: {Mitarbeiter.error.message}</p>;

  return (
    <>
      <Head>
        <title>LocalHorst V9</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <SectionCard title="Einkaufen">
          <Select
            value={ausgewählterMitarbeiter?.id}
            onValueChange={(value) =>
              setAusgewählterMitarbeiter(
                Mitarbeiter.data?.find(
                  (mitarbeiter) => mitarbeiter.id == value,
                ),
              )
            }
          >
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Mitarbeiter" />
            </SelectTrigger>
            <SelectContent>
              {Mitarbeiter.data?.map((mitarbeiter) => (
                <SelectItem key={mitarbeiter.id} value={mitarbeiter.id}>
                  {mitarbeiter.Name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <div className="mt-5">
            {EinkaufMitarbeiter && (
              <UpdateForm mitarbeiter={EinkaufMitarbeiter} />
            )}
          </div>
        </SectionCard>
        <SectionCard title="Einkaufsliste">
          {Mitarbeiter.data?.map((mitarbeiter) => {
            if (
              mitarbeiter.Einkauf?.Abgeschickt &&
              new Date(mitarbeiter.Einkauf.Abgeschickt).toDateString() ==
                new Date().toDateString()
            ) {
              return (
                <div key={mitarbeiter.id}>
                  <p>Wer: {mitarbeiter.Name}</p>
                  <p>Pfand: {mitarbeiter.Einkauf.Pfand}</p>

                  {mitarbeiter.Einkauf.Paypal ? (
                    <p className="text-red-500">Paypal</p>
                  ) : (
                    <p>Geld: {mitarbeiter.Einkauf.Geld}</p>
                  )}
                  {mitarbeiter.Einkauf.Abonniert && (
                    <p className="text-green-600">Abonnierter Einkauf</p>
                  )}
                  <p>
                    Was: <br />
                  </p>
                  <pre>{mitarbeiter.Einkauf.Dinge}</pre>
                  {mitarbeiter.Einkauf.Bilder &&
                    mitarbeiter.Einkauf.Bilder.length > 0 && (
                      <div className="grid grid-cols-3">
                        {mitarbeiter.Einkauf.Bilder.map((bild) => {
                          if (
                            new Date(bild.Upload).toDateString() ==
                            new Date().toDateString()
                          ) {
                            return (
                              <Image
                                key={bild.id}
                                src={`data:${bild.type};base64,${bild.image}`}
                                alt="Einkaufen Bild"
                                height={150}
                                width={150}
                                className="mt-2 rounded-lg border object-cover"
                                style={{ maxHeight: 200 }}
                              />
                            );
                          }
                        })}
                      </div>
                    )}
                  <hr />
                </div>
              );
            }
          })}
        </SectionCard>
      </main>
    </>
  );
}

registerPlugin(
  FilePondPluginImageExifOrientation,
  FilePondPluginFileValidateSize,
  FilePondPluginImagePreview,
  FilePondPluginFileEncode,
);

const formSchema = z.object({
  Paypal: z.boolean().default(false),
  Abonniert: z.boolean().default(false),
  Geld: z.string().optional(),
  Pfand: z.string().optional(),
  Dinge: z.string().optional(),
});

const UpdateForm = ({
  mitarbeiter,
}: {
  mitarbeiter: {
    Einkauf: {
      id: string;
      Paypal: boolean;
      Abonniert: boolean;
      Geld: string | null;
      Pfand: string | null;
      Dinge: string | null;
      Abgeschickt: Date | null;
      mitarbeiterId: string;
    } | null;
  } & Mitarbeiter;
}) => {
  const EinkaufUpdater = api.Einkauf.upsert.useMutation();
  const BildUploader = api.EinkaufBild.create.useMutation();

  const [file1, setFile1] = useState();
  const [file2, setFile2] = useState();
  const [file3, setFile3] = useState();

  // Ponds
  let pond1: FilePond | null = null;
  let pond2: FilePond | null = null;
  let pond3: FilePond | null = null;

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      Paypal: mitarbeiter.Einkauf?.Paypal,
      Abonniert: mitarbeiter.Einkauf?.Abonniert,
      Geld: mitarbeiter.Einkauf?.Geld ?? undefined,
      Pfand: mitarbeiter.Einkauf?.Pfand ?? undefined,
      Dinge: mitarbeiter.Einkauf?.Dinge ?? undefined,
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    // Get Images
    let Bild1Type = "",
      Bild1 = "";
    let Bild2Type = "",
      Bild2 = "";
    let Bild3Type = "",
      Bild3 = "";

    if (pond1) {
      const files = pond1.getFiles();
      files.forEach((file) => {
        Bild1 = file.getFileEncodeBase64String();
        Bild1Type = file.fileType;
      });
      pond1.processFiles(files).catch((err) => console.error(err));
    }
    if (pond2) {
      const files = pond2.getFiles();
      files.forEach((file) => {
        Bild2 = file.getFileEncodeBase64String();
        Bild2Type = file.fileType;
      });
      pond2.processFiles(files).catch((err) => console.error(err));
    }
    if (pond3) {
      const files = pond3.getFiles();
      files.forEach((file) => {
        Bild3 = file.getFileEncodeBase64String();
        Bild3Type = file.fileType;
      });
      pond3.processFiles(files).catch((err) => console.error(err));
    }

    const res = await EinkaufUpdater.mutateAsync({
      id: mitarbeiter.Einkauf?.id,
      ...values,
      mitarbeiterId: mitarbeiter.id,
      Abgeschickt: new Date(),
    });

    if (res) {
      // Einkauf wurde angelegt oder Aktualisiert, wir haben auf jeden Fall eine ID.
      // Wir können jetzt die Bilder hochladen.
      if (Bild1) {
        await BildUploader.mutateAsync({
          einkaufId: res.id,
          image: Bild1,
          type: Bild1Type,
        });
      }
      if (Bild2) {
        await BildUploader.mutateAsync({
          einkaufId: res.id,
          image: Bild2,
          type: Bild2Type,
        });
      }
      if (Bild3) {
        await BildUploader.mutateAsync({
          einkaufId: res.id,
          image: Bild3,
          type: Bild3Type,
        });
      }

      location.reload();
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
        <FormField
          control={form.control}
          name="Paypal"
          render={({ field }) => (
            <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
              <div className="space-y-0.5">
                <FormLabel className="text-base">Paypal</FormLabel>
              </div>
              <FormControl>
                <Switch
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
            </FormItem>
          )}
        />
        <div className="grid grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="Geld"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Geld</FormLabel>
                <FormControl>
                  <Input placeholder="Geld" {...field} />
                </FormControl>

                <FormMessage />
              </FormItem>
            )}
          />
          <FormField
            control={form.control}
            name="Pfand"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Pfand</FormLabel>
                <FormControl>
                  <Input placeholder="Pfand" {...field} />
                </FormControl>

                <FormMessage />
              </FormItem>
            )}
          />
        </div>
        <FormField
          control={form.control}
          name="Dinge"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Bio</FormLabel>
              <FormControl>
                <Textarea
                  placeholder="Was darf es denn sein?"
                  className="resize-none"
                  {...field}
                />
              </FormControl>

              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="Abonniert"
          render={({ field }) => (
            <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
              <div className="space-y-0.5">
                <FormLabel className="text-base">Abonniert?</FormLabel>
              </div>
              <FormControl>
                <Switch
                  checked={field.value}
                  onCheckedChange={field.onChange}
                />
              </FormControl>
            </FormItem>
          )}
        />
        <div className="grid grid-cols-3 gap-4">
          <FilePond
            files={file1}
            ref={(ref) => {
              pond1 = ref;
            }}
            allowFileEncode
            // @ts-expect-error Filepond ist komisch in React.
            onupdatefiles={setFile1}
            allowFileSizeValidation={true}
            maxFileSize={"1MB"}
            labelMaxFileSizeExceeded={"Das Bild ist zu groß!"}
            labelMaxFileSize="Maximal 1 MB"
            instantUpload={false}
            allowMultiple={false}
            maxFiles={1}
            server="https://httpbin.org/post"
            name="file1"
            labelIdle="Bild hier ablegen oder <span className='filepond--label-action'>Durchsuchen</span>"
          />
          <FilePond
            files={file2}
            ref={(ref) => {
              pond2 = ref;
            }}
            allowFileEncode
            // @ts-expect-error Filepond ist komisch in React.
            onupdatefiles={setFile2}
            allowFileSizeValidation={true}
            maxFileSize={"1MB"}
            labelMaxFileSizeExceeded={"Das Bild ist zu groß!"}
            labelMaxFileSize="Maximal 1 MB"
            instantUpload={false}
            allowMultiple={false}
            maxFiles={1}
            server="https://httpbin.org/post"
            name="file1"
            labelIdle="Bild hier ablegen oder <span className='filepond--label-action'>Durchsuchen</span>"
          />
          <FilePond
            files={file3}
            ref={(ref) => {
              pond3 = ref;
            }}
            allowFileEncode
            // @ts-expect-error Filepond ist komisch in React.
            onupdatefiles={setFile3}
            allowFileSizeValidation={true}
            maxFileSize={"1MB"}
            labelMaxFileSizeExceeded={"Das Bild ist zu groß!"}
            labelMaxFileSize="Maximal 1 MB"
            instantUpload={false}
            allowMultiple={false}
            maxFiles={1}
            server="https://httpbin.org/post"
            name="file1"
            labelIdle="Bild hier ablegen oder <span className='filepond--label-action'>Durchsuchen</span>"
          />
        </div>

        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
};
